[
 {
  "docstatus": 0,
  "doctype": "Client Script",
<<<<<<< HEAD
  "dt": "Customer",
  "enabled": 1,
  "modified": "2025-08-23 12:02:04.981672",
  "module": null,
  "name": "customer testing script",
  "script": " frappe.ui.form.on('Customer', {\r\n    test_value_1: function(frm) {\r\n        // જયારે Test Value 1 change થાય\r\n        frappe.show_alert({\r\n            message: __('You typed: {0}', [frm.doc.test_value_1]),\r\n            indicator: 'blue'\r\n        }, 5);\r\n    },\r\n\r\n    test_value_2: function(frm) {\r\n        // Test Value 2 change થાય ત્યારે Test Value 1 auto update\r\n        if (frm.doc.test_value_2) {\r\n            frm.set_value('test_value_1', frm.doc.test_value_2.toUpperCase());\r\n            frappe.msgprint(__('Test Value 1 auto-filled with UPPERCASE of Test Value 2'));\r\n        }\r\n    }\r\n});\r\n\r\n",
=======
  "dt": "Job Inward_In-House Job",
  "enabled": 1,
  "modified": "2025-08-12 17:04:31.740865",
  "module": null,
  "name": "Job Date",
  "script": "frappe.ui.form.on('Job Inward_In-House Job', {\r\n    onload: function(frm) {\r\n        // Agar inward_date khali ho to aaj ki date set karo\r\n        if (!frm.doc.inward_date) {\r\n            frm.set_value('inward_date', frappe.datetime.get_today());\r\n        }\r\n    },\r\n\r\n    challan_date(frm) {\r\n        const challanDate = frappe.datetime.str_to_obj(frm.doc.challan_date);\r\n        const inwardDate = frappe.datetime.str_to_obj(frm.doc.inward_date);\r\n\r\n        // Only validate if both dates exist\r\n        if (challanDate && inwardDate && inwardDate < challanDate) {\r\n            frappe.msgprint(__('Challan Date cannot be after Inward Date.'));\r\n            frm.set_value('challan_date', '');\r\n        }\r\n    },\r\n\r\n    validate(frm) {\r\n        const challanDate = frappe.datetime.str_to_obj(frm.doc.challan_date);\r\n        const inwardDate = frappe.datetime.str_to_obj(frm.doc.inward_date);\r\n\r\n        if (challanDate && inwardDate && inwardDate < challanDate) {\r\n            frappe.throw(__('Challan Date cannot be after Inward Date.'));\r\n        }\r\n    }\r\n});\r\n",
>>>>>>> sujal
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
<<<<<<< HEAD
  "dt": "Supplier",
  "enabled": 1,
  "modified": "2025-08-23 13:02:09.588259",
  "module": null,
  "name": "supplier testing script",
  "script": "frappe.ui.form.on('Supplier', {\r\n    test_value_1: function(frm) {\r\n        // જયારે Test Value 1 change થાય\r\n        frappe.show_alert({\r\n            message: __('You typed: {0}', [frm.doc.test_value_1]),\r\n            indicator: 'blue'\r\n        }, 5);\r\n    },\r\n\r\n    test_value_2: function(frm) {\r\n        // Test Value 2 change થાય ત્યારે Test Value 1 auto update\r\n        if (frm.doc.test_value_2) {\r\n            frm.set_value('test_value_1', frm.doc.test_value_2.toUpperCase());\r\n            frappe.msgprint(__('Test Value 1 auto-filled with UPPERCASE of Test Value 2'));\r\n        }\r\n    }\r\n});\r\n",
=======
  "dt": "Job Inward_In-House Job",
  "enabled": 1,
  "modified": "2025-08-19 12:29:36.547326",
  "module": null,
  "name": "Auto Ganareted",
  "script": "frappe.ui.form.on('Job Inward_In-House Job', {\r\n    onload(frm) {\r\n        // सिर्फ़ नए document पर ही series generate करो\r\n        if (frm.is_new() && !frm.doc.amended_from) {\r\n            frappe.db.get_list('Job Inward_In-House Job', {\r\n                fields: ['jobinward_no'],\r\n                order_by: 'creation desc',\r\n                limit: 1\r\n            }).then(records => {\r\n                if (records.length) {\r\n                    let last_no = records[0].jobinward_no || \"00000/00\";\r\n                    let [num, year] = last_no.split('/');\r\n                    let next_num = String(parseInt(num) + 1).padStart(5, '0');\r\n                    let final_no = `${next_num}/${year}`;\r\n                    frm.set_value('jobinward_no', final_no);\r\n                    frm.set_df_property('jobinward_no', 'read_only', 1);\r\n                }\r\n            });\r\n        }\r\n    },\r\n    before_save(frm) {\r\n        set_from_series(frm);\r\n    },\r\n    before_submit(frm) {\r\n        set_from_series(frm);\r\n    }\r\n});\r\n\r\nfunction set_from_series(frm) {\r\n    // अगर ये amended doc है तो पुराना ही jobinward_no रहने दो\r\n    if (frm.doc.amended_from) {\r\n        frappe.db.get_value(\"Job Inward_In-House Job\", frm.doc.amended_from, \"jobinward_no\")\r\n            .then(r => {\r\n                if (r.message && r.message.jobinward_no) {\r\n                    frm.set_value('jobinward_no', r.message.jobinward_no);\r\n                }\r\n            });\r\n    } else {\r\n        if (frm.doc.name && !frm.doc.__islocal) {\r\n            const final_no = build_no_from_name(frm.doc.name);\r\n            if (final_no) {\r\n                frm.set_value('jobinward_no', final_no);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nfunction build_no_from_name(name) {\r\n    const m = name.match(/-(\\d{2})-(\\d{5})$/);\r\n    if (m) return `${m[2]}/${m[1]}`;\r\n    return null;\r\n}\r\n",
>>>>>>> sujal
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
<<<<<<< HEAD
  "dt": "Job Card",
  "enabled": 1,
  "modified": "2025-08-23 15:22:38.120540",
  "module": null,
  "name": "jab card testing client script",
  "script": "frappe.ui.form.on('Job Card', {\r\n    test_value_1: function(frm) {\r\n        // જયારે Test Value 1 change થાય\r\n        frappe.show_alert({\r\n            message: __('You typed: {0}', [frm.doc.test_value_1]),\r\n            indicator: 'blue'\r\n        }, 5);\r\n    },\r\n\r\n    test_value_2: function(frm) {\r\n        // Test Value 2 change થાય ત્યારે Test Value 1 auto update\r\n        if (frm.doc.test_value_2) {\r\n            frm.set_value('test_value_1', frm.doc.test_value_2.toUpperCase());\r\n            frappe.msgprint(__('Test Value 1 auto-filled with UPPERCASE of Test Value 2'));\r\n        }\r\n    }\r\n});\r\n",
=======
  "dt": "Job Inward_In-House Job",
  "enabled": 1,
  "modified": "2025-08-26 11:09:13.524428",
  "module": "",
  "name": "click",
  "script": "// ---------- CONFIG ----------\r\nconst PARENT_DOCTYPE = \"Job Inward_In-House Job\";\r\nconst TABLE_FIELD = \"job_inward_item\";\r\nconst DETAIL_TABLE_FIELD = \"job_inward_item_detail\";\r\nconst EXISTING_BTN_FIELDNAME = \"btn_detail\";\r\nconst INJECT_CLASS = \"injected-detail-btn\";\r\n// -------------------------------------------------------------------------------\r\n\r\nlet current_item_reference = null;\r\nlet current_item_key = null;\r\n\r\nfrappe.ui.form.on(PARENT_DOCTYPE, {\r\n    onload(frm) {\r\n        frm.set_df_property(DETAIL_TABLE_FIELD, \"hidden\", 1);\r\n    },\r\n\r\n    refresh(frm) {\r\n        try {\r\n            const grid = frm.fields_dict[DETAIL_TABLE_FIELD].grid;\r\n            grid.df.cannot_add_rows = true;\r\n            grid.wrapper.find('.grid-add-row').hide();\r\n            prevent_auto_row_add_on_tab(frm, DETAIL_TABLE_FIELD);\r\n\r\n            const $wrapper = frm.fields_dict[DETAIL_TABLE_FIELD].$wrapper;\r\n            $wrapper.prev('.custom-table-header-box').remove();\r\n\r\n            if (current_item_key) {\r\n                const filtered_rows = frm.doc[DETAIL_TABLE_FIELD].filter(\r\n                    row => row.reference_item === current_item_key\r\n                );\r\n\r\n                frm._all_detail_rows = frm.doc[DETAIL_TABLE_FIELD];\r\n                frm.doc[DETAIL_TABLE_FIELD] = filtered_rows;\r\n\r\n                frm.refresh_field(DETAIL_TABLE_FIELD);\r\n\r\n                const $headerBox = $(`\r\n                    <div class=\"custom-table-header-box\" \r\n                          style=\"background:#f2f2f2;padding:10px 15px;margin:10px 0;\r\n                          border-radius:8px;font-weight:bold;font-size:14px;\">\r\n                        ${current_item_key}\r\n                     </div>\r\n                `);\r\n                $wrapper.before($headerBox);\r\n            }\r\n        } catch (e) {\r\n            console.warn(\"detail-table refresh warning:\", e);\r\n        }\r\n\r\n        add_injected_buttons(frm);\r\n        setTimeout(() => add_injected_buttons(frm), 250);\r\n        setTimeout(() => add_injected_buttons(frm), 900);\r\n\r\n        if (!frm.__detail_btn_observer && frm.fields_dict[TABLE_FIELD] && frm.fields_dict[TABLE_FIELD].grid) {\r\n            try {\r\n                const wrapperNode = frm.fields_dict[TABLE_FIELD].grid.wrapper[0];\r\n                if (wrapperNode) {\r\n                    const observer = new MutationObserver(() => {\r\n                        add_injected_buttons(frm);\r\n                    });\r\n                    observer.observe(wrapperNode, { childList: true, subtree: true });\r\n                    frm.__detail_btn_observer = observer;\r\n                }\r\n            } catch (e) {\r\n                console.warn(\"observer not created\", e);\r\n            }\r\n        }\r\n\r\n        // 👇 footer update on refresh\r\n        update_detail_table_footer(frm);\r\n    },\r\n\r\n    validate(frm) {\r\n        if (frm._all_detail_rows) {\r\n            frm.doc[DETAIL_TABLE_FIELD] = frm._all_detail_rows;\r\n            frm._all_detail_rows = null;\r\n        }\r\n\r\n        frm.doc[DETAIL_TABLE_FIELD] = frm.doc[DETAIL_TABLE_FIELD].filter(\r\n            row => row.quantity !== null && row.reference_item\r\n        );\r\n\r\n        let counterMap = {};\r\n        for (let row of frm.doc[DETAIL_TABLE_FIELD]) {\r\n            const ref = row.reference_item;\r\n            if (!counterMap[ref]) counterMap[ref] = 1;\r\n            row.idx = counterMap[ref]++;\r\n        }\r\n    }\r\n});\r\n\r\nfrappe.ui.form.on('Job Inward Item', {\r\n    btn_detail(frm, cdt, cdn) {\r\n        const row = locals[cdt][cdn];\r\n        show_item_detail_for_row(frm, row);\r\n    }\r\n});\r\n\r\nfunction add_injected_buttons(frm) {\r\n    if (!frm.fields_dict[TABLE_FIELD] || !frm.fields_dict[TABLE_FIELD].grid) return;\r\n    const $grid = $(frm.fields_dict[TABLE_FIELD].grid.wrapper);\r\n\r\n    $grid.find('.grid-row').each(function () {\r\n        const $row = $(this);\r\n        const rowname = $row.attr('data-name') || $row.attr('data-idx');\r\n        if (!rowname) return;\r\n\r\n        if ($row.find(`button[data-fieldname=\"${EXISTING_BTN_FIELDNAME}\"]`).length) {\r\n            return;\r\n        }\r\n\r\n        if ($row.find(`.${INJECT_CLASS}[data-rowname=\"${rowname}\"]`).length) return;\r\n\r\n        let $cell = $row.find(`td[data-fieldname=\"${EXISTING_BTN_FIELDNAME}\"]`);\r\n        if (!$cell.length) $cell = $row.find('td').last();\r\n\r\n        const $btn = $(`\r\n            <button class=\"btn btn-xs btn-default ${INJECT_CLASS}\" \r\n                     data-rowname=\"${rowname}\" title=\"Detail\" \r\n                     style=\"margin-left:6px;\">Detail</button>\r\n        `);\r\n        $cell.append($btn);\r\n    });\r\n\r\n    $grid.off('click', `.${INJECT_CLASS}`).on('click', `.${INJECT_CLASS}`, function (e) {\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n        const rowname = $(this).data('rowname');\r\n\r\n        const child_rows = frm.doc[TABLE_FIELD] || [];\r\n        let rowdoc = child_rows.find(r => (r.name && r.name == rowname) || (r.idx && r.idx == Number(rowname)));\r\n        if (!rowdoc) {\r\n            rowdoc = child_rows[Number(rowname) - 1] || child_rows[0];\r\n        }\r\n        if (!rowdoc) {\r\n            frappe.msgprint(('Row not found.'));\r\n            return;\r\n        }\r\n\r\n        show_item_detail_for_row(frm, rowdoc);\r\n    });\r\n}\r\n\r\nfunction show_item_detail_for_row(frm, row) {\r\n    if (!row.total_pcs || row.total_pcs <= 0) {\r\n        frappe.msgprint(\"Total PCS must be greater than 0.\");\r\n        return;\r\n    }\r\n    if (!row.total_quantity || row.total_quantity <= 0) {\r\n        frappe.msgprint(\"Total Quantity must be greater than 0.\");\r\n        return;\r\n    }\r\n\r\n    if (frm.doc.docstatus === 1) {\r\n        const current_item_key_local = `${row.product_type || \"\"} - ${row.product_name || \"\"}`;\r\n        const all_rows = frm._all_detail_rows || frm.doc[DETAIL_TABLE_FIELD] || [];\r\n        const relevant_rows = all_rows.filter(r => r.reference_item === current_item_key_local);\r\n\r\n        if (relevant_rows.length === 0) {\r\n            frappe.msgprint(('No detail rows available for this item.'));\r\n            return;\r\n        }\r\n\r\n        let html = `<div style=\"max-height:400px;overflow:auto\">\r\n            <table class=\"table table-bordered\"><thead>\r\n                <tr><th>#</th><th>Quantity</th><th>Reference Item</th></tr>\r\n            </thead><tbody>`;\r\n\r\n        relevant_rows.forEach((r, idx) => {\r\n            html += `<tr>\r\n                <td>${idx + 1}</td>\r\n                <td>${(r.quantity || 0)}</td>\r\n                <td>${frappe.utils.escape_html(r.reference_item || '')}</td>\r\n            </tr>`;\r\n        });\r\n\r\n        html += `</tbody></table></div>`;\r\n\r\n        const d = new frappe.ui.Dialog({\r\n            title: __('Details for {0}', [current_item_key_local]),\r\n            fields: [\r\n                { fieldtype: 'HTML', fieldname: 'content' },\r\n                { fieldtype: 'Button', label: 'Run Action', fieldname: 'run_action' }\r\n            ]\r\n        });\r\n\r\n        d.fields_dict.content.$wrapper.html(html);\r\n\r\n        d.fields_dict.run_action.$input.on('click', function () {\r\n            frappe.msgprint((__('Action executed for {0}', [current_item_key_local])));\r\n        });\r\n\r\n        d.show();\r\n        return;\r\n    }\r\n\r\n    current_item_key = `${row.product_type || \"\"} - ${row.product_name || \"\"}`;\r\n    current_item_reference = {\r\n        total_pcs: row.total_pcs,\r\n        total_qty: row.total_quantity\r\n    };\r\n\r\n    const all_rows = frm._all_detail_rows || frm.doc[DETAIL_TABLE_FIELD] || [];\r\n    const relevant_rows = all_rows.filter(r => r.reference_item === current_item_key);\r\n    const remaining_rows = all_rows.filter(r => r.reference_item !== current_item_key);\r\n    frm.doc[DETAIL_TABLE_FIELD] = remaining_rows;\r\n\r\n    let rows_to_show = [];\r\n\r\n    if (relevant_rows.length > 0) {\r\n        rows_to_show = relevant_rows.slice(0, row.total_pcs);\r\n        while (rows_to_show.length < row.total_pcs) {\r\n            rows_to_show.push({ quantity: 0, reference_item: current_item_key });\r\n        }\r\n    } else {\r\n        for (let i = 0; i < row.total_pcs; i++) {\r\n            rows_to_show.push({ quantity: 0, reference_item: current_item_key });\r\n        }\r\n    }\r\n\r\n    for (let i = 0; i < rows_to_show.length; i++) {\r\n        const item = rows_to_show[i];\r\n        const new_row = frm.add_child(DETAIL_TABLE_FIELD);\r\n        new_row.quantity = item.quantity || 0;\r\n        new_row.reference_item = current_item_key;\r\n        new_row.idx = i + 1;\r\n    }\r\n\r\n    frm.set_df_property(DETAIL_TABLE_FIELD, \"hidden\", 0);\r\n    frm.refresh_field(DETAIL_TABLE_FIELD);\r\n    frm.trigger(\"refresh\");\r\n\r\n    // 👇 footer update after showing table\r\n    update_detail_table_footer(frm);\r\n}\r\n\r\nfrappe.ui.form.on('Job Inward Item Detail', {\r\n    quantity(frm, cdt, cdn) {\r\n        if (!current_item_reference) return;\r\n\r\n        const rows = frm.doc[DETAIL_TABLE_FIELD].filter(r => r.reference_item === current_item_key);\r\n        const total_entered = rows.reduce((sum, row) => sum + (row.quantity || 0), 0);\r\n        const is_last_row = rows[rows.length - 1].name === cdn;\r\n        const total_SubQty = rows.reduce((sum, r) => sum + (r.quantity || 0), 0);\r\n        if (is_last_row && total_entered !== current_item_reference.total_qty) {\r\n            frappe.msgprint(`❌ Total Quantity must be exactly ${current_item_reference.total_qty}. You entered ${total_entered}.`);\r\n        }\r\n        //123456789\r\n         if (total_SubQty > current_item_reference.total_qty) {\r\n            frappe.msgprint(`LINE BY LINE ❌ Total Quantity must be exactly ${current_item_reference.total_qty}. You entered ${total_entered}.`);\r\n        }\r\n\r\n        // 👇 update footer live on change\r\n        update_detail_table_footer(frm);\r\n    },\r\n\r\n    job_inward_item_detail_add(frm, cdt, cdn) {\r\n        const rows = frm.doc[DETAIL_TABLE_FIELD] || [];\r\n        const allowed_rows = current_item_reference?.total_pcs || 0;\r\n\r\n//THIS SCRIPT IS FOR NO MORE THEN PCS IN SUBDETAIL VALIDATE\r\n        if (rows.length > allowed_rows) {\r\n            frm.get_field(DETAIL_TABLE_FIELD).grid.grid_rows[rows.length - 1].remove();\r\n            // frappe.msgprint(`⚠ You cannot add more than ${allowed_rows} rows.`);\r\n        }\r\n    }\r\n});\r\n\r\nfunction prevent_auto_row_add_on_tab(frm, table_fieldname) {\r\n    setTimeout(() => {\r\n        try {\r\n            const grid = frm.fields_dict[table_fieldname].grid;\r\n            const wrapper = $(grid.wrapper);\r\n\r\n            wrapper.find('input').off('keydown.preventrowadd');\r\n\r\n            wrapper.on('keydown.preventrowadd', 'input', function (e) {\r\n                const isLastEditableInput = $(this).closest('tr').is(':last-child');\r\n                const isTab = e.key === \"Tab\" || e.which === 9;\r\n\r\n                if (isTab && isLastEditableInput) {\r\n                    const total_rows = frm.doc[table_fieldname]?.filter(row => row.reference_item === current_item_key)?.length || 0;\r\n                    const allowed_rows = current_item_reference?.total_pcs || 0;\r\n\r\n                    if (total_rows >= allowed_rows) {\r\n                        e.preventDefault();\r\n                        $(this).blur();\r\n                    }\r\n                }\r\n            });\r\n        } catch (e) {}\r\n    }, 300);\r\n}\r\n\r\n// ---------- NEW FUNCTION ---------- SUB DETAIL UNDER TOTAL QUANTI\r\nfunction update_detail_table_footer(frm) {\r\n    try {\r\n        const $wrapper = frm.fields_dict[DETAIL_TABLE_FIELD].$wrapper;\r\n\r\n        // purana footer hatado\r\n        $wrapper.next('.custom-table-footer-box').remove();\r\n\r\n        if (current_item_key) {\r\n            const rows = frm.doc[DETAIL_TABLE_FIELD].filter(\r\n                r => r.reference_item === current_item_key\r\n            );\r\n            const total_qty = rows.reduce((sum, r) => sum + (r.quantity || 0), 0);\r\n\r\n            const $footerBox = $(`\r\n                <div class=\"custom-table-footer-box\"\r\n                     style=\"background:#f9f9f9;padding:10px 15px;margin:10px 0;\r\n                            border-radius:8px;font-weight:bold;font-size:14px;\r\n                            text-align:right;\">\r\n                     Total Quantity: ${total_qty}\r\n                </div>\r\n            `);\r\n\r\n            $wrapper.after($footerBox);\r\n        }\r\n    } catch (e) {\r\n        console.warn(\"update footer failed:\", e);\r\n    }\r\n}",
>>>>>>> sujal
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
<<<<<<< HEAD
  "dt": "Work Order",
  "enabled": 1,
  "modified": "2025-08-25 11:05:45.100020",
  "module": null,
  "name": "work order client script",
  "script": "frappe.ui.form.on('Work Order', {\r\n    refresh(frm) {\r\n        // Add a label highlight effect\r\n        frm.fields_dict.client_name.$wrapper.css({\r\n            'background-color': '#e0ffe0',\r\n            'font-weight': 'bold'\r\n        });\r\n\r\n        // Automatically set a field if empty\r\n        if (!frm.doc.client_name) {\r\n            frm.set_value('client_name', 'Auto-filled by script');\r\n            frappe.show_alert({ \r\n                message: __('Client Name auto-filled'), \r\n                indicator: 'green' \r\n            });\r\n        }\r\n    }\r\n});",
=======
  "dt": "Job Inward_In-House Job",
  "enabled": 1,
  "modified": "2025-08-13 15:41:19.995810",
  "module": null,
  "name": "Job Inward companywise warehouse",
  "script": "frappe.ui.form.on('Job Inward_In-House Job', {\r\n    onload: function(frm) {\r\n        // Warehouse aur Product Name filters set karo\r\n        set_warehouse_query(frm);\r\n        set_product_name_query(frm);\r\n\r\n        // JobInward Type ka default set karo agar blank hai\r\n        if (!frm.doc.jobinward_type) {\r\n            frm.set_value('jobinward_type', 'Material Receipt');\r\n        }\r\n\r\n        // User ko change karne se roko\r\n        frm.set_df_property('jobinward_type', 'read_only', 1);\r\n\r\n        // Master (Cost Center) filter set karo\r\n        set_master_query(frm);\r\n    },\r\n\r\n    company: function(frm) {\r\n        set_warehouse_query(frm);\r\n        set_master_query(frm); // Company change par Master filter update karo\r\n    }\r\n});\r\n\r\n// ✅ Master field (Cost Center) filter by Company\r\nfunction set_master_query(frm) {\r\n    frm.set_query(\"master\", function() {\r\n        return {\r\n            filters: {\r\n                company: frm.doc.company\r\n            }\r\n        };\r\n    });\r\n}\r\n\r\nfunction set_warehouse_query(frm) {\r\n    // For Parent Warehouse Name\r\n    frm.set_query('warehouse_name', () => {\r\n        return {\r\n            filters: {\r\n                company: frm.doc.company\r\n            }\r\n        };\r\n    });\r\n\r\n    // For Child Table's Warehouse Name\r\n    frm.fields_dict.table_duni.grid.get_field('warehouse_name').get_query = function(doc, cdt, cdn) {\r\n        return {\r\n            filters: {\r\n                company: frm.doc.company\r\n            }\r\n        };\r\n    };\r\n}\r\n\r\n// 🔹 Product Name filter by Product Type\r\nfunction set_product_name_query(frm) {\r\n    frm.fields_dict.table_duni.grid.get_field('product_name').get_query = function(doc, cdt, cdn) {\r\n        const child = locals[cdt][cdn];\r\n        return {\r\n            filters: {\r\n                item_group: child.product_type\r\n            }\r\n        };\r\n    };\r\n}\r\n",
>>>>>>> sujal
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
<<<<<<< HEAD
  "dt": "Project",
  "enabled": 1,
  "modified": "2025-08-22 12:21:57.376979",
  "module": null,
  "name": "project script",
  "script": "frappe.ui.form.on('Project', {\r\n    refresh(frm) {\r\n        // Add a label highlight effect\r\n        frm.fields_dict.client_name.$wrapper.css({\r\n            'background-color': '#e0ffe0',\r\n            'font-weight': 'bold'\r\n        });\r\n\r\n        // Automatically set a field if empty\r\n        if (!frm.doc.client_name) {\r\n            frm.set_value('client_name', 'Auto-filled by script');\r\n            frappe.show_alert({ \r\n                message: __('Client Name auto-filled'), \r\n                indicator: 'green' \r\n            });\r\n        }\r\n    }\r\n});\r\n",
=======
  "dt": "Job Inward_In-House Job",
  "enabled": 1,
  "modified": "2025-08-13 16:08:33.517707",
  "module": null,
  "name": "unit",
  "script": "frappe.ui.form.on(\"Job Inward Item\", {\r\n    product_name: function(frm, cdt, cdn) {\r\n        let row = locals[cdt][cdn];\r\n\r\n        if (row.product_name) {\r\n            frappe.db.get_value(\"Item\", row.product_name, \"stock_uom\").then(r => {\r\n                if (r.message && r.message.stock_uom) {\r\n                    frappe.model.set_value(cdt, cdn, \"unit\", r.message.stock_uom);\r\n\r\n                    // Sirf current row ka Unit disable karo\r\n                    let grid_row = frm.fields_dict.job_inward_item.grid.get_row(cdn);\r\n                    if (grid_row) {\r\n                        grid_row.toggle_editable(\"unit\", false);\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    },\r\n\r\n    unit: function(frm, cdt, cdn) {\r\n        let row = locals[cdt][cdn];\r\n        if (row.unit) {\r\n            let grid_row = frm.fields_dict.job_inward_item.grid.get_row(cdn);\r\n            if (grid_row) {\r\n                grid_row.toggle_editable(\"unit\", false);\r\n            }\r\n        }\r\n    }\r\n});\r\n",
>>>>>>> sujal
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
<<<<<<< HEAD
  "dt": "Campaign",
  "enabled": 1,
  "modified": "2025-08-25 15:08:52.904598",
  "module": "galaxynext",
  "name": "campaign client script",
  "script": "frappe.ui.form.on(\"Campaign\", {\r\n    refresh(frm) {\r\n        // Page refresh થતાની સાથે message બતાવશે\r\n        frappe.msgprint(\"Contact form loaded successfully!\");\r\n    },\r\n\r\n    test_checkbox(frm) {\r\n        if (frm.doc.test_checkbox) {\r\n            frappe.msgprint(\"✅ Checkbox selected!\");\r\n        } else {\r\n            frappe.msgprint(\"❌ Checkbox unselected!\");\r\n        }\r\n    },\r\n\r\n    test_remarks(frm) {\r\n        if (frm.doc.test_remarks) {\r\n            frappe.show_alert({\r\n                message: __(\"You entered: \" + frm.doc.test_remarks),\r\n                indicator: \"green\"\r\n            }, 5);\r\n        }\r\n    }\r\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Prospect",
  "enabled": 1,
  "modified": "2025-08-26 15:04:54.971402",
  "module": null,
  "name": "prospect client script",
  "script": "frappe.ui.form.on(\"Prospect\", {\r\n    refresh(frm) {\r\n        // Page refresh થતાની સાથે message બતાવશે\r\n        frappe.msgprint(\"Contact form loaded successfully!\");\r\n    },\r\n\r\n    test_checkbox(frm) {\r\n        if (frm.doc.test_checkbox) {\r\n            frappe.msgprint(\"✅ Checkbox selected!\");\r\n        } else {\r\n            frappe.msgprint(\"❌ Checkbox unselected!\");\r\n        }\r\n    },\r\n\r\n    test_remarks(frm) {\r\n        if (frm.doc.test_remarks) {\r\n            frappe.show_alert({\r\n                message: __(\"You entered: \" + frm.doc.test_remarks),\r\n                indicator: \"green\"\r\n            }, 5);\r\n        }\r\n    }\r\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Opportunity",
  "enabled": 1,
  "modified": "2025-08-25 16:26:07.133879",
  "module": null,
  "name": "opportunity client script",
  "script": "frappe.ui.form.on(\"Opportunity\", {\r\n    refresh(frm) {\r\n        // Page refresh થતાની સાથે message બતાવશે\r\n        frappe.msgprint(\"Contact form loaded successfully!\");\r\n    },\r\n\r\n    test_checkbox(frm) {\r\n        if (frm.doc.test_checkbox) {\r\n            frappe.msgprint(\"✅ Checkbox selected!\");\r\n        } else {\r\n            frappe.msgprint(\"❌ Checkbox unselected!\");\r\n        }\r\n    },\r\n\r\n    test_remarks(frm) {\r\n        if (frm.doc.test_remarks) {\r\n            frappe.show_alert({\r\n                message: __(\"You entered: \" + frm.doc.test_remarks),\r\n                indicator: \"green\"\r\n            }, 5);\r\n        }\r\n    }\r\n});\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Lead",
  "enabled": 1,
  "modified": "2025-08-26 15:03:09.029573",
  "module": null,
  "name": "lead client script",
  "script": "frappe.ui.form.on(\"Lead\", {\r\n    refresh(frm) {\r\n        // Page refresh થતાની સાથે message બતાવશે\r\n        frappe.msgprint(\"Contact form loaded successfully!\");\r\n    },\r\n\r\n    test_checkbox(frm) {\r\n        if (frm.doc.test_checkbox) {\r\n            frappe.msgprint(\"✅ Checkbox selected!\");\r\n        } else {\r\n            frappe.msgprint(\"❌ Checkbox unselected!\");\r\n        }\r\n    },\r\n\r\n    test_remarks(frm) {\r\n        if (frm.doc.test_remarks) {\r\n            frappe.show_alert({\r\n                message: __(\"You entered: \" + frm.doc.test_remarks),\r\n                indicator: \"green\"\r\n            }, 5);\r\n        }\r\n    }\r\n});\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Contract",
  "enabled": 1,
  "modified": "2025-08-25 16:43:11.309979",
  "module": null,
  "name": "contract client script",
  "script": "frappe.ui.form.on(\"Contract\", {\r\n    refresh(frm) {\r\n        // Page refresh થતાની સાથે message બતાવશે\r\n        frappe.msgprint(\"Contact form loaded successfully!\");\r\n    },\r\n\r\n    test_checkbox(frm) {\r\n        if (frm.doc.test_checkbox) {\r\n            frappe.msgprint(\"✅ Checkbox selected!\");\r\n        } else {\r\n            frappe.msgprint(\"❌ Checkbox unselected!\");\r\n        }\r\n    },\r\n\r\n    test_remarks(frm) {\r\n        if (frm.doc.test_remarks) {\r\n            frappe.show_alert({\r\n                message: __(\"You entered: \" + frm.doc.test_remarks),\r\n                indicator: \"green\"\r\n            }, 5);\r\n        }\r\n    }\r\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "GERP_DOC",
  "enabled": 1,
  "modified": "2025-08-30 10:53:06.732001",
  "module": null,
  "name": "GERP client script",
  "script": "frappe.ui.form.on('GERP_DOC', {  // Replace with your Doctype\r\n    // Trigger when the form loads\r\n    onload: function(frm) {\r\n        // If title is empty, set default value\r\n        if (!frm.doc.title) {\r\n            frm.set_value('title', 'Default Title');\r\n        }\r\n\r\n        // Show message with current title\r\n        frappe.msgprint(`Current Title: ${frm.doc.title}`);\r\n        console.log(\"Form Loaded:\", frm.doc);\r\n    },\r\n\r\n    // Trigger when the 'title' field changes\r\n    title: function(frm) {\r\n        console.log(\"Title changed to:\", frm.doc.title);\r\n        frappe.msgprint(`You updated the Title to: ${frm.doc.title}`);\r\n    },\r\n\r\n    // Trigger before saving the form\r\n    before_save: function(frm) {\r\n        // Ensure title is not empty\r\n        if (!frm.doc.title) {\r\n            frm.set_value('title', 'Default Title');\r\n            frappe.msgprint(\"Title was empty, default value applied!\");\r\n        }\r\n    }\r\n});\r\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "GERPNext Doc",
  "enabled": 1,
  "modified": "2025-08-30 11:25:06.214766",
  "module": null,
  "name": "GERPNext client script",
  "script": "frappe.ui.form.on('GERPNext Doc', {  // Replace with your Doctype\r\n    // Trigger when the form loads\r\n    onload: function(frm) {\r\n        // If title is empty, set default value\r\n        if (!frm.doc.title) {\r\n            frm.set_value('title', 'Default Title');\r\n        }\r\n\r\n        // Show message with current title\r\n        frappe.msgprint(`Current Title: ${frm.doc.title}`);\r\n        console.log(\"Form Loaded:\", frm.doc);\r\n    },\r\n\r\n    // Trigger when the 'title' field changes\r\n    title: function(frm) {\r\n        console.log(\"Title changed to:\", frm.doc.title);\r\n        frappe.msgprint(`You updated the Title to: ${frm.doc.title}`);\r\n    },\r\n\r\n    // Trigger before saving the form\r\n    before_save: function(frm) {\r\n        // Ensure title is not empty\r\n        if (!frm.doc.title) {\r\n            frm.set_value('title', 'Default Title');\r\n            frappe.msgprint(\"Title was empty, default value applied!\");\r\n        }\r\n    }\r\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "ERPNext Doc",
  "enabled": 1,
  "modified": "2025-08-30 12:30:37.337428",
  "module": null,
  "name": "ERPNext client script",
  "script": " frappe.ui.form.on('ERPNext Doc', {  // Replace with your Doctype\r\n    // Trigger when the form loads\r\n    onload: function(frm) {\r\n        // If title is empty, set default value\r\n        if (!frm.doc.title) {\r\n            frm.set_value('title', 'Default Title');\r\n        }\r\n\r\n        // Show message with current title\r\n        frappe.msgprint(`Current Title: ${frm.doc.title}`);\r\n        console.log(\"Form Loaded:\", frm.doc);\r\n    },\r\n\r\n    // Trigger when the 'title' field changes\r\n    title: function(frm) {\r\n        console.log(\"Title changed to:\", frm.doc.title);\r\n        frappe.msgprint(`You updated the Title to: ${frm.doc.title}`);\r\n    },\r\n\r\n    // Trigger before saving the form\r\n    before_save: function(frm) {\r\n        // Ensure title is not empty\r\n        if (!frm.doc.title) {\r\n            frm.set_value('title', 'Default Title');\r\n            frappe.msgprint(\"Title was empty, default value applied!\");\r\n        }\r\n    }\r\n});",
=======
  "dt": "Job Inward_In-House Job",
  "enabled": 1,
  "modified": "2025-08-26 15:32:47.125465",
  "module": null,
  "name": "Quantity validation for job inward",
  "script": "// frappe.ui.form.on('Job Inward_In-House Job', {\r\n//     validate: function(frm) {\r\n//         let sub_row = frm.doc.job_inward_item_detail || [];\r\n//         let item_rows  = frm.doc.table_duni || [];\r\n//         let TotalQuantity = 0;\r\n//         let TotalSubQuantity=0;\r\n//         for (let a=0;a<item_rows.length;a++){\r\n//             TotalQuantity=0;\r\n//             TotalSubQuantity=0;\r\n//             if (item_rows[a].total_quantity>0){\r\n//                 TotalQuantity=TotalQuantity+item_rows[a].total_quantity;\r\n//                     for (let i = 0; i < sub_row.length; i++) {\r\n//                         // let TotalSubQty=0;\r\n//                         // TotalSubQty=TotalSubQuantity;\r\n//                         // TotalSubQuantity=0;\r\n//                         let item_row = item_rows[i];\r\n//                             if (sub_row[i].quantity>0){\r\n//                                 TotalSubQuantity=TotalSubQuantity+sub_row[i].quantity;\r\n//                             }\r\n//                     }\r\n//                     // frappe.throw(__(\"Total Quantity: {0}\", [TotalQuantity]));\r\n//                     if (TotalQuantity<TotalSubQuantity){\r\n//                         frappe.throw(\r\n//                          __(\"Total Quantity-{0} || Total sub Quantity-{1} : Quantity Not More then Total Quantity\",[TotalQuantity,TotalSubQuantity])\r\n//                         );\r\n//                     }\r\n//                     if (TotalQuantity>TotalSubQuantity){\r\n//                         frappe.throw(\r\n//                         __(\"Total Quantity-{0} || Total sub Quantity-{1} : Quantity Not Below then Total Quantity\",[TotalQuantity,TotalSubQuantity])\r\n//                         );\r\n//                     }\r\n//                     if (TotalSubQuantity>0){\r\n//                         TotalSubQuantity=0;\r\n//                         TotalQuantity=0;\r\n//                     }\r\n//             }\r\n//         }\r\n//         // frappe.throw(__(\"Total Quantity: {0}\", [TotalQuantity]));\r\n//                 if (TotalQuantity<TotalSubQuantity){\r\n//                      frappe.throw(\r\n//                          __(\"Total Quantity-{0} || Total sub Quantity-{1} : Quantity Not More then Total Quantity\",[TotalQuantity,TotalSubQuantity])\r\n//                     );\r\n//                 }\r\n//                  if (TotalQuantity>TotalSubQuantity){\r\n//                      frappe.throw(\r\n//                         __(\"Total Quantity-{0} || Total sub Quantity-{1} : Quantity Not Below then Total Quantity\",[TotalQuantity,TotalSubQuantity])\r\n//                     );\r\n//                 }\r\n//                 // TotalSubQuantity=0;\r\n//     }\r\n// });\r\n\r\n\r\n\r\n\r\n//////   laptop sctipt\r\n// frappe.ui.form.on(\"Job Inward_In-House Job\", {\r\n//     validate: function(frm) {\r\n//         if (!frm.doc.table_duni) return;\r\n\r\n//         frm.doc.table_duni.forEach(item_row => {\r\n//             let total_sub_qty = 0;\r\n//             let message_text = \"\";\r\n//             message_text=`${item_row.product_type} - ${item_row.product_name}`; \r\n//             frappe.msgprint(message_text);\r\n//             // Loop through sub-details of each item\r\n//             (item_row.job_inward_item_detail || []).forEach(sd => {\r\n//               //if (sd.reference_item === item_row.product_name) {\r\n//                     total_sub_qty += flt(sd.quantity);\r\n//                 frappe.msgprint(sd.reference_item);\r\n//               //}\r\n//             });\r\n//                  let second_total = 0;\r\n//                      if (frm.doc.job_inward_item_detail) {\r\n                         \r\n//                           frm.doc.job_inward_item_detail.forEach(row => {\r\n//                              if (row.reference_item === message_text) {\r\n//                                   second_total += flt(row.quantity) || 0;\r\n//                             // frappe.msgprint(row.reference_item);\r\n//                                 }\r\n//                                 else\r\n//                                     {\r\n//                                         frappe.msgprint(\"idli & dhosa\");\r\n//                                     }\r\n//                             });\r\n//                         }\r\n//                         else\r\n//                         {\r\n//                             frappe.msgprint(\"demo\");\r\n//                         }\r\n                        \r\n//              message_text += `Row ${item_row.idx} → Main Qty: ${item_row.total_quantity}, Sub Qty: ${second_total}\\n`;\r\n// frappe.msgprint(message_text);\r\n//               // Always show info message with calculation\r\n//             frappe.msgprint({\r\n//                 title: \"Quantity Check\",\r\n//                 indicator: \"blue\",\r\n//                 message: `Row <b>${item_row.idx}</b><br>\r\n//                           Main Qty (total_quantity): <b>${item_row.total_quantity}</b><br>\r\n//                           Sub-Details Total: <b>${total_sub_qty}</b><br>\r\n//                           in sub total : <b>${second_total}</b><br>\r\n//                           item  : <b> ${item_row.product_name} </b> `\r\n//             });\r\n\r\n//             // Compare main qty vs sub-detail sum\r\n//             if (flt(item_row.total_quantity) !== second_total) {\r\n//                 frappe.throw(\r\n//                     `Quantity mismatch for Item Row <b>${item_row.idx}</b>.<br>\r\n//                      Main Qty (total_quantity): <b>${item_row.total_quantity}</b><br>\r\n//                      Sub-Details Total: <b>${total_sub_qty}</b>`\r\n//                 );\r\n//             }\r\n//         });\r\n//     }\r\n// });\r\n\r\n\r\n\r\n\r\n\r\n\r\n// -------------------------\r\n// akshay bhai script\r\n\r\nfrappe.ui.form.on('Job Inward_In-House Job', {\r\n    validate: function(frm) {\r\n        let sub_row = frm.doc.job_inward_item_detail || [];\r\n        let item_rows  = frm.doc.table_duni || [];\r\n        let TotalQuantity = 0;\r\n        let TotalSubQuantity=0;\r\n        let TotalRowWiseSubQty=0;\r\n        //MAIN ROW\r\n        for (let a=0;a<item_rows.length;a++){\r\n            TotalQuantity=0;\r\n            TotalSubQuantity=0;\r\n            if (item_rows[a].total_quantity>0){\r\n                TotalRowWiseSubQty=TotalSubQuantity;\r\n                TotalQuantity=TotalQuantity+item_rows[a].total_quantity;\r\n                \r\n                    //SUB ROW \r\n                    for (let i = 0; i < sub_row.length; i++) {\r\n                        let ProductName = \"\";\r\n                        ProductName=`${item_rows[a].product_type} - ${item_rows[a].product_name}`;\r\n                        // frappe.msgprint(ProductName);\r\n                        if (sub_row[i].reference_item === ProductName) {\r\n                            if (sub_row[i].quantity>0){\r\n                                TotalSubQuantity=TotalSubQuantity+sub_row[i].quantity-TotalRowWiseSubQty;\r\n                            }\r\n                        }\r\n                    }\r\n                    if (TotalQuantity<TotalSubQuantity){\r\n                     frappe.throw(\r\n                         __(\"Total Quantity-{0} || Total sub Quantity-{1} :1- Quantity Not More then Total Quantity\",[TotalQuantity,TotalSubQuantity])\r\n                    );\r\n                }\r\n                 if (TotalQuantity>TotalSubQuantity){\r\n                     frappe.throw(\r\n                        __(\"Total Quantity-{0} || Total sub Quantity-{1} :2- Quantity Not Below then Total Quantity\",[TotalQuantity,TotalSubQuantity])\r\n                    );\r\n                }\r\n            }\r\n            //  TotalRowWiseSubQty=item_rows[a].total_quantity;\r\n        }\r\n        // frappe.throw(__(\"Total Quantity: {0}\", [TotalQuantity]));\r\n                // if (TotalQuantity<TotalSubQuantity){\r\n                //      frappe.throw(\r\n                //          __(\"Total Quantity-{0} || Total sub Quantity-{1} :3- Quantity Not More then Total Quantity\",[TotalQuantity,TotalSubQuantity])\r\n                //     );\r\n                // }\r\n                //  if (TotalQuantity>TotalSubQuantity){\r\n                //      frappe.throw(\r\n                //         __(\"Total Quantity-{0} || Total sub Quantity-{1} :4- Quantity Not Below then Total Quantity\",[TotalQuantity,TotalSubQuantity])\r\n                //     );\r\n                // }\r\n    }\r\n});",
>>>>>>> sujal
  "view": "Form"
 }
]